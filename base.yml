version: "3.9"

networks:
  fs-test-project:
    driver: bridge

services:
  api.fs.test.project:
    # linking the docker file
    build: "./docker/api"
    # the entrypoint that will be executed after the container initialization: this one is actually the one that's inside the container.
    entrypoint: /entrypoint.sh
    # copying all the volumes that i actually need for the container in order to work
    volumes:
      - ./backend/:/var/www/html
      - ./docker/api/entrypoint.sh:/entrypoint.sh
      - ./index.html:/var/www/html/index.html:delegated
    # no ports because its all managed by the reverse proxy
    # the env file
    env_file: 
      - api.dev.env
    # the other containers that this one needs and rely on to actually work
    depends_on:
      - db.fs.test.project
    # the network of the container itself
    networks:
      - fs-test-project
  
  db.fs.test.project:
    # the image
    image: postgres
    # restarting policies (*** ? to ckeck)
    restart: always
    # env not through an env file
    ports:
      - "3306:3306"
    environment:
      POSTGRES_PASSWORD: root
      POSTGRES_USER: root
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - fs-test-project

  nginx.fs.test:
    container_name: nginx.fs.test.project
    image: "nginx:1.21.3"
    entrypoint: /entrypoint.sh
    volumes:
      - ./docker/nginx/conf.d/base.conf:/etc/nginx/conf.d/default.conf:delegated # montare su default.conf altrimenti il default.conf originale rimane :)
      - ./docker/nginx/entrypoint.sh:/entrypoint.sh:delegated
    ports:
      - "80:80"
    networks:
      - fs-test-project
    # health check
    healthcheck:
      test: ["CMD-SHELL", "curl localhost"]